FUN is a simple, structured, dynamic, functional and high-level programming language.

FUN's syntax is simple and clear. It contains expressions and declerations.

```
abstract class Exp 
abstract class BExp 
abstract class Decl

case class Var(s: String) extends Exp
case class Num(i: Int) extends Exp
case class Aop(o: String, a1: Exp, a2: Exp) extends Exp case class If(a: BExp, e1: Exp, e2: Exp) extends Exp
case class Write(e: Exp) extends Exp
case class Sequ(e1: Exp, e2: Exp) extends Exp
case class Call(name: String, args: List[Exp]) extends Exp

case class Bop(o: String, a1: Exp, a2: Exp) extends BExp

case class Def(name: String,
                args: List[String],
                body: Exp) extends Decl 

case class Main(e: Exp) extends Decl
```

The `fun_llvm.sc` compiler targets the LLVM Intermediate Language, or LLVM Intermediate
Representation (short LLVM‐IR). It will also allow us to benefit from the modular 
structure of the LLVM compiler and let for example the compiler gen‐ erate code for 
different CPUs, like X86 or ARM. That means we can be agnostic about where our code 
actually runs. We can also be ignorant about optimising code and allocating memory 
efficiently.